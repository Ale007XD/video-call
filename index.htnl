<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, sans-serif;
            background: #1a1a2e;
            color: white;
            padding: 10px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        h1 {
            text-align: center;
            font-size: 24px;
            margin: 10px 0;
            color: #0f3460;
        }
        
        .container {
            display: flex;
            flex-direction: column;
            gap: 15px;
            max-width: 500px;
            margin: 0 auto;
            width: 100%;
        }
        
        .step {
            background: #16213e;
            border-radius: 10px;
            padding: 15px;
        }
        
        .step-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #e94560;
        }
        
        button {
            width: 100%;
            padding: 15px;
            font-size: 18px;
            border: none;
            border-radius: 8px;
            background: #e94560;
            color: white;
            font-weight: bold;
            cursor: pointer;
            margin-bottom: 10px;
        }
        
        button:active {
            background: #c23850;
        }
        
        button:disabled {
            background: #666;
            cursor: not-allowed;
        }
        
        #qrcode {
            background: white;
            padding: 20px;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 250px;
        }
        
        #qrcode canvas,
        #qrcode img {
            max-width: 100% !important;
            height: auto !important;
        }
        
        video {
            width: 100%;
            border-radius: 10px;
            background: black;
            max-height: 40vh;
        }
        
        .hidden {
            display: none;
        }
        
        .status {
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            font-size: 16px;
            font-weight: bold;
        }
        
        .status.waiting {
            background: #ffa500;
            color: black;
        }
        
        .status.connected {
            background: #4caf50;
        }
        
        #scanArea {
            position: relative;
            width: 100%;
            height: 250px;
            background: black;
            border-radius: 10px;
            overflow: hidden;
        }
        
        #scanVideo {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .info {
            background: #0f3460;
            padding: 10px;
            border-radius: 5px;
            font-size: 14px;
            line-height: 1.5;
        }
    </style>
</head>
<body>
    <h1>üé• –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫</h1>
    
    <div class="container">
        <!-- –®–∞–≥ 1: –ù–∞—á–∞–ª–æ -->
        <div id="step1" class="step">
            <div class="step-title">–ö—Ç–æ –≤—ã?</div>
            <button onclick="startAsCaller()">–Ø –∑–≤–æ–Ω—é (–ø–æ–∫–∞–∂—É QR-–∫–æ–¥)</button>
            <button onclick="startAsReceiver()">–ú–Ω–µ –∑–≤–æ–Ω—è—Ç (–æ—Ç—Å–∫–∞–Ω–∏—Ä—É—é QR-–∫–æ–¥)</button>
            <div class="info">
                ‚ÑπÔ∏è –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥, –¥—Ä—É–≥–æ–π —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –µ–≥–æ –∫–∞–º–µ—Ä–æ–π
            </div>
        </div>
        
        <!-- –®–∞–≥ 2: –ü–æ–∫–∞–∑ QR-–∫–æ–¥–∞ (–∑–≤–æ–Ω—è—â–∏–π) -->
        <div id="step2" class="step hidden">
            <div class="step-title">–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥</div>
            <div id="qrcode"></div>
            <div class="status waiting">‚è≥ –ñ–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...</div>
        </div>
        
        <!-- –®–∞–≥ 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ (–ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π) -->
        <div id="step3" class="step hidden">
            <div class="step-title">–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥</div>
            <div id="scanArea">
                <video id="scanVideo" autoplay playsinline></video>
            </div>
            <canvas id="scanCanvas" class="hidden"></canvas>
            <div class="info">
                üì± –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–≤–Ω–æ –∏ –ø–æ–±–ª–∏–∂–µ –∫ —ç–∫—Ä–∞–Ω—É
            </div>
        </div>
        
        <!-- –®–∞–≥ 4: –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ -->
        <div id="step4" class="step hidden">
            <div class="status connected">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ!</div>
            <video id="remoteVideo" autoplay playsinline></video>
            <video id="localVideo" autoplay playsinline muted></video>
            <button onclick="hangUp()" style="background: #d32f2f;">–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫</button>
        </div>
    </div>

    <!-- QR Code –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    
    <!-- jsQR –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è -->
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

    <script>
        let pc = null;
        let localStream = null;
        let role = null;
        let scanInterval = null;

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ STUN —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        const config = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        };

        // –ù–∞—á–∞—Ç—å –∫–∞–∫ –∑–≤–æ–Ω—è—â–∏–π
        async function startAsCaller() {
            role = 'caller';
            showStep(2);
            
            try {
                // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
                localStream = await navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: 'user' }, 
                    audio: true 
                });
                
                // –°–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                pc = new RTCPeerConnection(config);
                
                // –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º
                localStream.getTracks().forEach(track => {
                    pc.addTrack(track, localStream);
                });
                
                // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π —Å—Ç—Ä–∏–º
                pc.ontrack = (event) => {
                    document.getElementById('remoteVideo').srcObject = event.streams[0];
                    document.getElementById('localVideo').srcObject = localStream;
                    showStep(4);
                };
                
                // –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                const offer = await pc.createOffer();
                await pc.setLocalDescription(offer);
                
                // –î–æ–∂–¥–∞—Ç—å—Å—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                await waitForIceCandidates();
                
                // –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
                const offerData = JSON.stringify(pc.localDescription);
                new QRCode(document.getElementById("qrcode"), {
                    text: offerData,
                    width: 256,
                    height: 256,
                    correctLevel: QRCode.CorrectLevel.L
                });
                
            } catch (error) {
                alert('–û—à–∏–±–∫–∞: ' + error.message);
            }
        }

        // –ù–∞—á–∞—Ç—å –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π
        async function startAsReceiver() {
            role = 'receiver';
            showStep(3);
            
            try {
                // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–µ—Ä—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: 'environment' } 
                });
                
                const video = document.getElementById('scanVideo');
                video.srcObject = stream;
                
                // –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
                startScanning();
                
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ: ' + error.message);
            }
        }

        // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
        function startScanning() {
            const video = document.getElementById('scanVideo');
            const canvas = document.getElementById('scanCanvas');
            const ctx = canvas.getContext('2d');
            
            scanInterval = setInterval(() => {
                if (video.readyState === video.HAVE_ENOUGH_DATA) {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                    
                    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    const code = jsQR(imageData.data, imageData.width, imageData.height);
                    
                    if (code) {
                        clearInterval(scanInterval);
                        handleScannedData(code.data);
                    }
                }
            }, 300);
        }

        // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        async function handleScannedData(data) {
            try {
                // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–º–µ—Ä—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                const video = document.getElementById('scanVideo');
                video.srcObject.getTracks().forEach(track => track.stop());
                
                const offer = JSON.parse(data);
                
                // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
                localStream = await navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: 'user' }, 
                    audio: true 
                });
                
                // –°–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                pc = new RTCPeerConnection(config);
                
                // –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º
                localStream.getTracks().forEach(track => {
                    pc.addTrack(track, localStream);
                });
                
                // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π —Å—Ç—Ä–∏–º
                pc.ontrack = (event) => {
                    document.getElementById('remoteVideo').srcObject = event.streams[0];
                    document.getElementById('localVideo').srcObject = localStream;
                    showStep(4);
                };
                
                // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                await pc.setRemoteDescription(new RTCSessionDescription(offer));
                
                // –°–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç
                const answer = await pc.createAnswer();
                await pc.setLocalDescription(answer);
                
                // –î–æ–∂–¥–∞—Ç—å—Å—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                await waitForIceCandidates();
                
                // –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ —Å –æ—Ç–≤–µ—Ç–æ–º
                showStep(2);
                const answerData = JSON.stringify(pc.localDescription);
                new QRCode(document.getElementById("qrcode"), {
                    text: answerData,
                    width: 256,
                    height: 256,
                    correctLevel: QRCode.CorrectLevel.L
                });
                
                // –¢–µ–ø–µ—Ä—å –∂–¥—ë–º, –∫–æ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –∞–±–æ–Ω–µ–Ω—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞—à –æ—Ç–≤–µ—Ç
                // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
                setTimeout(() => {
                    if (pc.connectionState !== 'connected') {
                        showStep(4);
                    }
                }, 5000);
                
            } catch (error) {
                alert('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞: ' + error.message);
            }
        }

        // –î–æ–∂–¥–∞—Ç—å—Å—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        function waitForIceCandidates() {
            return new Promise((resolve) => {
                if (pc.iceGatheringState === 'complete') {
                    resolve();
                } else {
                    pc.addEventListener('icegatheringstatechange', () => {
                        if (pc.iceGatheringState === 'complete') {
                            resolve();
                        }
                    });
                }
            });
        }

        // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
        function hangUp() {
            if (pc) {
                pc.close();
                pc = null;
            }
            
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            
            showStep(1);
            location.reload();
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π —à–∞–≥
        function showStep(stepNumber) {
            for (let i = 1; i <= 4; i++) {
                const step = document.getElementById('step' + i);
                if (step) {
                    step.classList.toggle('hidden', i !== stepNumber);
                }
            }
        }
    </script>
</body>
</html>
